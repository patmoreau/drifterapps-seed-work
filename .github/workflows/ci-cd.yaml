name: ci-cd

on:
  push:
    branches: [main]
    paths-ignore:
      [
        "docs/**",
        ".vscode/**",
        "**/*.md",
        "**/codeql-analysis.yml",
        "**/linter.yml",
        "**/mutation-tests.yml",
        "**/test-results.yml",
      ]

  pull_request:
    paths-ignore:
      [
        "docs/**",
        ".vscode/**",
        "**/*.md",
        "**/codeql-analysis.yml",
        "**/linter.yml",
        "**/mutation-tests.yml",
        "**/test-results.yml",
      ]

  workflow_dispatch:

env:
  PROJECT_NAME: DrifterApps Seeds
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

  debug:
    name: Debug
    runs-on: ubuntu-latest

    steps:
      - name: Debug Action
        uses: hmarr/debug-action@v2.1.0

  set-version:
    name: Set version
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.gitversion.outputs.majorMinorPatch }}
      assembly-version: ${{ steps.gitversion.outputs.semVer }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Disable workflow commands
        run: |
          echo "::stop-commands::`echo -n ${{ github.token }} | sha256sum | head -c 64`"

      - name: Ensure .NET Installed
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: "5.x"

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.10.2
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      - name: Display GitVersion outputs
        run: |
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"

      - name: Enable workflow commands
        run: |
          echo "::`echo -n ${{ github.token }} | sha256sum | head -c 64`::"

  build:
    runs-on: ubuntu-latest
    needs: set-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - run: echo '${{ steps.stepid.outputs.dotnet-version }}'

      - name: Install Stryker.NET global tool
        run: dotnet tool install --global dotnet-stryker

      - name: Restore packages
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release /property:Version=${{ needs.set-version.outputs.version }}

      - name: Tests
        run: dotnet test --no-restore --no-build --configuration Release --logger 'trx;verbosity=normal' --results-directory ./tests-results --collect 'XPlat Code Coverage'

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Test Results
          path: |
            ./tests-results/**/*.trx

      - name: Pack NuGet packages
        if: github.event_name == 'push'
        run: dotnet pack /property:Version=${{ needs.set-version.outputs.version }} --no-restore --no-build --include-symbols --configuration Release -o ./nuget-packages

      - name: Publish NuGet packages
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v3
        with:
          name: NuGet Packages
          path: ./nuget-packages

  publish:
    needs: [set-version, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.event.action != 'closed'

    env:
      VERSION: ${{ needs.set-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          global-json-file: global.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Download NuGet packages
        uses: actions/download-artifact@v3
        with:
          name: NuGet Packages
          path: ./nuget-packages

      - name: Publish Package
        run: dotnet nuget push ./nuget-packages/*.nupkg --source "https://api.nuget.org/v3/index.json" --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate

      - name: Tag version
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            try {
              await github.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: "tags/${{ env.VERSION }}"
              })
            } catch (e) {
              console.log("The ${{ env.VERSION }} tag doesn't exist yet: " + e)
            }
            await github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ env.VERSION }}",
              sha: context.sha
            })

  event_file:
    name: "Event File"
    runs-on: ubuntu-latest
    steps:
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}
